#!/usr/bin/env python3
"""Scan the latest candidate forecast gate report and emit alerts when margins shrink."""

from __future__ import annotations

import argparse
import re
from pathlib import Path
from typing import Dict, List, Tuple

RE_LINE = re.compile(
    r"Skipping (?P<symbol>[A-Z]+) - strategy return (?P<value>-?\d+\.\d+)"
    r" below minimum (?P<thresh>-?\d+\.\d+)"
)


def parse_report(report_path: Path) -> Dict[str, Tuple[float, float]]:
    """Return mapping of symbol -> (value, threshold)."""
    if not report_path.exists():
        raise FileNotFoundError(f"Gate report not found: {report_path}")
    data: Dict[str, Tuple[float, float]] = {}
    for line in report_path.read_text(encoding="utf-8").splitlines():
        match = RE_LINE.search(line)
        if match:
            symbol = match.group("symbol").upper()
            value = float(match.group("value"))
            thresh = float(match.group("thresh"))
            data[symbol] = (value, thresh)
        elif "no_skip_detected" in line:
            # symbol heading was the previous markdown heading; rely on state
            pass
    return data


def main() -> None:
    parser = argparse.ArgumentParser(description="Alert on forecast gate margins.")
    parser.add_argument(
        "--report",
        type=Path,
        default=Path("marketsimulator/run_logs/candidate_forecast_gate_report.md"),
        help="Markdown report generated by check_candidate_forecasts.py",
    )
    parser.add_argument(
        "--max-shortfall",
        type=float,
        default=0.003,
        help="Maximum allowed deficit below the threshold that should trigger an alert (default 0.003).",
    )
    args = parser.parse_args()

    try:
        entries = parse_report(args.report)
    except FileNotFoundError as exc:
        print(f"[warn] {exc}")
        return

    if not entries:
        print("[info] No gate failures found; nothing to alert.")
        return

    alerts: List[str] = []
    for symbol, (value, thresh) in entries.items():
        shortfall = thresh - value
        if shortfall <= args.max_shortfall:
            alerts.append(
                f"{symbol}: strategy_return={value:.4f}, threshold={thresh:.4f}, shortfall={shortfall:.4f}"
            )

    if alerts:
        print("[alert] Forecast margins within threshold:")
        for alert in alerts:
            print(f"  - {alert}")
    else:
        print("[info] No candidates within the shortfall tolerance.")


if __name__ == "__main__":
    main()
