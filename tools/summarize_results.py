#!/usr/bin/env python3
"""Sweep simulator logs, extract metrics, and rebuild marketsimulatorresults.md.

Also materialises a lightweight preview in current_state_config/results_preview by
default so the project root stays uncluttered.
"""

from __future__ import annotations

import argparse
import datetime as dt
import os
from pathlib import Path
import sys

REPO_ROOT = Path(__file__).resolve().parent.parent
if str(REPO_ROOT) not in sys.path:
    sys.path.insert(0, str(REPO_ROOT))

from typing import Iterable, List

from tools.extract_metrics import extract_metrics


_DEFAULT_PREVIEW_DIR = Path(
    os.environ.get("RESULTS_PREVIEW_DIR", "current_state_config/results_preview")
)


def _default_preview_length() -> int:
    env_value = os.environ.get("RESULTS_PREVIEW_LENGTH")
    if env_value:
        try:
            return max(int(env_value), 0)
        except ValueError:
            pass
    return 200


def cleanup_preview_shards(base_dir: Path, keep_preview_file: bool = True) -> None:
    """
    Remove generated preview shard files from ``base_dir``.

    Parameters
    ----------
    base_dir:
        Directory to purge.
    keep_preview_file:
        If True, preserve ``results_preview.txt``; otherwise delete it too.
    """

    if not base_dir.exists():
        return

    for shard in base_dir.glob("results_preview_char_*.txt"):
        if shard.is_file():
            shard.unlink()

    if not keep_preview_file:
        preview_file = base_dir / "results_preview.txt"
        if preview_file.exists():
            preview_file.unlink()


def write_preview_assets(markdown: str, preview_dir: Path, max_chars: int) -> None:
    """Write the truncated preview text and per-character shards."""

    preview_dir.mkdir(parents=True, exist_ok=True)

    snippet = markdown[: max(max_chars, 0)]
    preview_file = preview_dir / "results_preview.txt"
    preview_file.write_text(snippet, encoding="utf-8")

    cleanup_preview_shards(preview_dir)

    for index, char in enumerate(snippet):
        (preview_dir / f"results_preview_char_{index}.txt").write_text(
            char, encoding="utf-8"
        )


def discover_logs(glob: str) -> Iterable[Path]:
    return sorted(Path(".").glob(glob))


def format_metrics_section(log_path: Path) -> str:
    metrics = extract_metrics(log_path.read_text(encoding="utf-8", errors="ignore"))
    timestamp = dt.datetime.fromtimestamp(log_path.stat().st_mtime)
    lines: List[str] = []
    lines.append(f"## {log_path.name}")
    lines.append(f"- **Log path**: `{log_path}`")
    lines.append(f"- **Last modified**: {timestamp.isoformat()}")
    lines.append("- **Metrics**:")
    for key, value in metrics.items():
        display = "null" if value is None else f"{value:.6f}"
        lines.append(f"  - `{key}`: {display}")
    lines.append("")  # blank line between sections
    return "\n".join(lines)


def build_markdown(logs: Iterable[Path]) -> str:
    header = [
        "# Market Simulator Experiments",
        "",
        "_Generated by tools/summarize_results.py_",
        "",
    ]
    sections = [format_metrics_section(log) for log in logs]
    return "\n".join(header + sections)


def main() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--log-glob",
        default="run*.log",
        help="Glob pattern to find simulator logs (default: %(default)s).",
    )
    parser.add_argument(
        "--output",
        default="marketsimulatorresults.md",
        type=Path,
        help="Destination markdown file (default: %(default)s).",
    )
    parser.add_argument(
        "--preview-dir",
        default=_DEFAULT_PREVIEW_DIR,
        type=Path,
        help=(
            "Directory for results preview assets "
            "(set RESULTS_PREVIEW_DIR to override)."
        ),
    )
    parser.add_argument(
        "--preview-length",
        default=_default_preview_length(),
        type=int,
        help="Number of characters to include in preview output (default: %(default)s).",
    )
    parser.add_argument(
        "--disable-preview",
        action="store_true",
        help="Skip writing preview assets entirely.",
    )
    args = parser.parse_args()

    logs = list(discover_logs(args.log_glob))
    if not logs:
        placeholder = [
            "# Market Simulator Experiments",
            "",
            f"_No logs matched pattern {args.log_glob!r}._",
            "",
        ]
        args.output.write_text("\n".join(placeholder), encoding="utf-8")
        return

    markdown = build_markdown(logs)
    args.output.write_text(markdown, encoding="utf-8")

    if not args.disable_preview:
        preview_dir = Path(args.preview_dir) if args.preview_dir else None
        if preview_dir is not None:
            write_preview_assets(markdown, preview_dir, args.preview_length)
            project_root = Path(".").resolve()
            if preview_dir.resolve() != project_root:
                cleanup_preview_shards(project_root, keep_preview_file=False)
        else:
            cleanup_preview_shards(Path("."), keep_preview_file=False)


if __name__ == "__main__":
    main()
